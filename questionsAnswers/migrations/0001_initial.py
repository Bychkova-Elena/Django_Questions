# Generated by Django 3.1.4 on 2021-01-03 10:07

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': '',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nameCategory', models.CharField(max_length=150, verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, verbose_name='Title')),
                ('body', models.TextField(verbose_name='News')),
                ('draft', models.BooleanField(default=True, verbose_name='Draft')),
            ],
            options={
                'verbose_name': 'News',
                'verbose_name_plural': 'News',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TopPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'TopPlayer',
                'verbose_name_plural': 'TopPlayers',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nameSubcategory', models.CharField(max_length=150, verbose_name='Subcategory')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='questionsAnswers.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Subcategory',
                'verbose_name_plural': 'Subcategories',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QuestionsList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(verbose_name='Question')),
                ('answer', models.CharField(max_length=150, verbose_name='Answer')),
                ('clarification', models.TextField(blank=True, null=True, verbose_name='Clarification')),
                ('subcategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='questionsAnswers.subcategory', verbose_name='Subcategory')),
            ],
            options={
                'verbose_name': 'QuestionsList',
                'verbose_name_plural': 'QuestionsList',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Points',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='Quantity')),
                ('numberGames', models.PositiveIntegerField(default=0, verbose_name='Number of games')),
                ('commonPoints', models.PositiveIntegerField(default=0, verbose_name='Common quantity points')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Points',
                'verbose_name_plural': 'Points',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complaint', models.TextField(verbose_name='Complaint')),
                ('status', models.CharField(choices=[('SENT', 'SENT'), ('UNDER CONSIDERATION', 'UNDER CONSIDERATION'), ('REJECT', 'REJECT'), ('ACCEPT', 'ACCEPT'), ('FIXED', 'FIXED')], default='SENT', max_length=20, verbose_name='Status')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='questionsAnswers.questionslist', verbose_name='QuestionsList')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Complaint',
                'verbose_name_plural': 'Complaints',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(verbose_name='Comment')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='questionsAnswers.news', verbose_name='News')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AnswerOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_option', models.CharField(max_length=150, verbose_name='First option')),
                ('second_option', models.CharField(max_length=150, verbose_name='Second option')),
                ('third_option', models.CharField(blank=True, max_length=150, null=True, verbose_name='Third option')),
                ('fourth_option', models.CharField(blank=True, max_length=150, null=True, verbose_name='Fourth option')),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='answerOptions', to='questionsAnswers.questionslist', verbose_name='QuestionsList')),
            ],
            options={
                'verbose_name': 'AnswerOption',
                'verbose_name_plural': 'AnswerOptions',
                'db_table': '',
                'managed': True,
            },
        ),
    ]
